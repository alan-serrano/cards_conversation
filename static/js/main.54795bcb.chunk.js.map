{"version":3,"sources":["pages/Edit.js","components/Dialog_help.js","services/firebase.js","helpers/utils.js","components/Settings.js","components/Card.js","services/getCards.js","layout/header.js","pages/Party.js","pages/Landing.js","pages/Admin.js","App.js","index.js"],"names":["Edit","className","useStylesDialog","makeStyles","theme","appBar","position","title","marginLeft","spacing","flex","content","marginTop","Transition","React","forwardRef","props","ref","Slide","direction","DialogHelp","children","Icon","classes","useState","open","setOpen","handleClose","IconButton","aria-label","style","color","onClick","Dialog","fullScreen","onClose","aria-labelledby","aria-describedby","TransitionComponent","AppBar","Toolbar","edge","Typography","variant","DialogContent","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","database","randomBetweenNumber","min","max","Math","floor","random","randomElementArray","arr","length","ContentSettings","difficulties","normalizedDifficulties","difficultyStates","normalizedDifficultiesMap","setDifficultyStates","normalizedTopics","topics","topicStates","normalizedTopicsMap","setTopicStates","allDifficultiesCheck","setAllDifficultiesCheck","allTopicsCheck","setAllTopicsCheck","createCheckboxs","elements","elementStates","handler","map","element","index","FormControlLabel","control","Checkbox","checked","id","onChange","name","key","label","useEffect","Object","values","filter","v","Container","maxWidth","FormControl","component","FormLabel","FormGroup","event","target","newDifficulyStates","difficultyStateId","newDifficultyStates","FormHelperText","Divider","light","newTopicStates","topicStateId","console","log","newTopicsStates","Settings","topicFilters","setTopicFilters","difficultyFilters","setDifficultyFilters","useParams","undefined","refcurrentTopicsParty","refcurrentDifficultiesParty","set","useStyles","root","expand","transform","transition","transitions","create","duration","shortest","expandOpen","display","justifyContent","alignItems","CardComponent","question","help","onUpdateCard","setCurrentTopic","currentQuestions","currentQuestionsMap","currentQuestion","setCurrentQuestion","Card","CardHeader","HelpIcon","CardContent","getCard","container","Header","languageActives","setLanguageISO","languageISO","languages","history","useHistory","anchorEl","setAnchorEl","handleMenuSelect","languageId","currentTarget","dataset","Button","push","Menu","keepMounted","Boolean","menuItems","languageID","MenuItem","data-language-id","textTransform","marginRight","nativeName","createMenuItems","flexSpace","flexBasis","Party","questions","dataIsReady","partyIsReady","setPartyIsReady","currentTopic","isDisabledPrevBtn","setIsDisabledPrevBtn","isDisabledNextBtn","setIsDisabledNextBt","isDisabledRandomBtn","setIsDisabledRandomBtn","refcurrentQuestionParty","newQuestion","questionId","error","topicId","refParty","getParty","snapshot","party","val","on","errorObject","code","off","hasOwnProperty","disabled","size","currentQuestionInfo","prevQuestionInfo","nextQuestionInfo","Landing","fullWidth","Admin","AppRoutes","setLanguageActives","setLanguages","setQuestions","setTopics","setNormalizedTopics","setNormalizedTopicsMap","setDifficulties","setNormalizedDifficulties","setNormalizedDifficultiesMap","setCurrentQuestions","setCurrentQuestionsMap","setDataIsReady","initialFilter","result","refLanguages","getLanguages","actives","isoLangs","refData","getData","data","normalizedQuestions","normalizedQuestionsMap","difficulty","sort","a","b","forEach","value","topic","idNormalized","difficultyId","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54795bcb.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Edit() {\n    return (\n        <div className=\"edit-page\">\n            Página Edit\n        </div>\n    );\n}\n\nexport default Edit;","import React from 'react';\n// Styles MUI\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Components Mui\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\n\n// Icons Mui\nimport CloseIcon from '@material-ui/icons/Close';\n\n// Dialog\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Slide from '@material-ui/core/Slide';\n\n// Icons\nimport IconButton from '@material-ui/core/IconButton';\n\n// Dialog\nconst useStylesDialog = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    content: {\n        marginTop: '20px'\n    }\n}));\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction DialogHelp({children, Icon}) {\n\n    const classes = useStylesDialog();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <>\n            <IconButton aria-label=\"help\" style={{ color: '#F44336' }} onClick={handleClickOpen}>\n                <Icon/>\n            </IconButton>\n            <Dialog fullScreen open={open} onClose={handleClose} aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\" TransitionComponent={Transition}>\n                <AppBar className={classes.appBar} >\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                            <CloseIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Help\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <DialogContent className={classes.content}>\n                        {children}\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n\nexport default DialogHelp;","import firebase from 'firebase';\n\nconst config = {\n    apiKey: \"AIzaSyBJmgMqOrcOQBg3-JvswwmqlLCvbIAIoeY\",\n    authDomain: \"cards-conversation-starters.firebaseapp.com\",\n    databaseURL: \"https://cards-conversation-starters.firebaseio.com\",\n    projectId: \"cards-conversation-starters\",\n    storageBucket: \"cards-conversation-starters.appspot.com\",\n    messagingSenderId: \"1037492872627\",\n    appId: \"1:1037492872627:web:9af0f2901b3655cb7357c6\",\n    measurementId: \"G-HSK36FCQYP\"\n};\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth;\nexport const db = firebase.database();","export function randomBetweenNumber(min, max) {\n    return Math.floor( (max - min + 1) * Math.random() + min )\n}\n\nexport function randomElementArray(arr) {\n    const randomId = randomBetweenNumber(0, arr.length - 1)\n    return arr[ randomId ]\n}\n\nexport function randomIdArray(arr) {\n    const randomId = randomBetweenNumber(0, arr.length - 1)\n    return randomId;\n}","import React from 'react';\nimport { useParams } from \"react-router-dom\";\n// Styles MUI\nimport { makeStyles } from '@material-ui/core/styles';\n\n// Components Mui\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n// Icons Mui\nimport CloseIcon from '@material-ui/icons/Close';\nimport DoneIcon from '@material-ui/icons/Done';\n\n// Dialog\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Slide from '@material-ui/core/Slide';\nimport Container from '@material-ui/core/Container'\n\n// Icons\nimport IconButton from '@material-ui/core/IconButton';\nimport SettingsIcon from '@material-ui/icons/Settings';\n\n//firebase\nimport { db } from '../services/firebase';\nimport { randomElementArray } from '../helpers/utils';\n\n\n// Dialog\nconst useStylesDialog = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    content: {\n        marginTop: '20px'\n    }\n}));\n\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nfunction Settings(props) {\n    const {\n        topics,\n        normalizedTopics,\n        normalizedTopicsMap,\n        topicFilters,\n        setTopicFilters,\n\n        difficulties,\n        normalizedDifficulties,\n        normalizedDifficultiesMap,\n        difficultyFilters,\n        setDifficultyFilters,\n    } = props;\n\n    const {id} = useParams();\n\n    const classes = useStylesDialog();\n\n    const [open, setOpen] = React.useState(false);\n    \n    // Handle cheks states\n    const [difficultyStates, setDifficultyStates] = React.useState();\n    \n    const [topicStates, setTopicStates] = React.useState();\n    \n    React.useEffect( function initializeFilters() {\n        setDifficultyStates({\n            ...difficultyFilters,\n        });\n\n        setTopicStates({\n            ...topicFilters,\n        });\n    }, [difficultyFilters, topicFilters] )\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n\n        setDifficultyStates({\n            ...difficultyFilters,\n        });\n\n        setTopicStates({\n            ...topicFilters,\n        });\n        \n    };\n    \n    const handleSave = () => {\n        setOpen(false);\n\n        if( id !== undefined ) {\n            const refcurrentTopicsParty = db.ref(`parties/${id}/topics`);\n            const refcurrentDifficultiesParty = db.ref(`parties/${id}/difficulties`);\n    \n            refcurrentTopicsParty.set({\n                ...topicStates,\n            });\n            \n            refcurrentDifficultiesParty.set({\n                ...difficultyStates,\n            });\n\n\n        } else {\n            setDifficultyFilters({\n                ...difficultyStates,\n            });\n\n            setTopicFilters({\n                ...topicStates,\n            });\n        }\n    };\n\n    return (\n        <>\n            <IconButton aria-label=\"settings\" style={{ color: '#F44336' }} onClick={handleClickOpen}>\n                <SettingsIcon/>\n            </IconButton>\n            <Dialog fullScreen open={open} onClose={handleClose} aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\" TransitionComponent={Transition}>\n                <AppBar className={classes.appBar} >\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                            <CloseIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            Settings\n                        </Typography>\n                        <IconButton edge=\"start\" color=\"inherit\" onClick={handleSave} aria-label=\"close\">\n                            <DoneIcon />\n                        </IconButton>\n                    </Toolbar>\n                </AppBar>\n                <DialogContent className={classes.content}>\n                    <ContentSettings \n                        topics={topics}\n                        normalizedTopics={normalizedTopics}\n                        normalizedTopicsMap={normalizedTopicsMap}\n                        topicStates={topicStates}\n                        setTopicStates={setTopicStates}\n                        \n                        difficulties={difficulties}\n                        normalizedDifficulties={normalizedDifficulties}\n                        normalizedDifficultiesMap={normalizedDifficultiesMap}\n                        difficultyStates={difficultyStates}\n                        setDifficultyStates={setDifficultyStates}\n                    />\n                        \n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n\nfunction ContentSettings(props) {\n    const {\n        difficulties,\n        normalizedDifficulties,\n        normalizedDifficultiesMap,\n        difficultyStates,\n        setDifficultyStates,\n\n        topics,\n        normalizedTopics,\n        normalizedTopicsMap,\n        topicStates,\n        setTopicStates\n    } = props\n\n\n    const [allDifficultiesCheck, setAllDifficultiesCheck] = React.useState(false);\n    const [allTopicsCheck, setAllTopicsCheck] = React.useState(false);\n\n    const handleDifficultyChange = (event) => {\n        const newDifficultyStates = {...difficultyStates};\n        newDifficultyStates[event.target.name] = event.target.checked;\n        setDifficultyStates( newDifficultyStates );\n    };\n    \n    const handleAllDifficultiesCheck = (event) => {\n        if( event.target.checked ) {\n            const newDifficulyStates = {};\n\n            for (const difficultyStateId in difficultyStates) {\n                newDifficulyStates[difficultyStateId] = true;\n            }\n\n            setDifficultyStates( newDifficulyStates );\n        } else {\n            const newDifficulyStates = {};\n\n            for (const difficultyStateId in difficultyStates) {\n                newDifficulyStates[difficultyStateId] = false;\n            }\n\n            setDifficultyStates( newDifficulyStates );\n        }\n\n        setAllDifficultiesCheck( event.target.checked );\n    };\n    \n    const handleTopicChange = (event) => {\n        const newTopicsStates = {...topicStates};\n        newTopicsStates[event.target.name] = event.target.checked;\n        setTopicStates(newTopicsStates);\n    };\n\n    const handleAllTopicsCheck = (event) => {\n        if( event.target.checked ) {\n            const newTopicStates = {};\n\n            for (const topicStateId in topicStates) {\n                newTopicStates[topicStateId] = true;\n            }\n            console.log(newTopicStates);\n\n            setTopicStates( newTopicStates );\n        } else {\n            const newTopicStates = {};\n\n            for (const topicStateId in topicStates) {\n                newTopicStates[topicStateId] = false;\n            }\n\n            setTopicStates( newTopicStates );\n        }\n\n        setAllTopicsCheck( event.target.checked );\n    };\n\n    React.useEffect( function verifyCheckboxsDifficulty() {\n        if( Object.values(difficultyStates).filter( v => v ).length === Object.values(difficultyStates).length ) {\n            setAllDifficultiesCheck(true);\n        } else {\n            setAllDifficultiesCheck(false);\n        }\n        \n        if( Object.values(topicStates).filter( v => v ).length !== Object.values(topicStates).length ) {\n            setAllTopicsCheck(false);\n        } else {\n            setAllTopicsCheck(true);\n        }\n\n    },[difficultyStates, topicStates]);\n\n    function createCheckboxs(elements, elementStates, handler) {\n\n        return elements.map( (element, index) => (\n            <FormControlLabel\n                control={<Checkbox checked={elementStates[element.id]} onChange={handler} name={`${element.id}`} key={index} />}\n                label={element.name}\n            />\n        ));\n    }\n    \n    return (\n        <>\n            <form>\n                <Container maxWidth=\"xs\">\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Select difficulty</FormLabel>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={<Checkbox checked={allDifficultiesCheck} onChange={handleAllDifficultiesCheck} />}\n                                label={\"All\"}\n                            />\n                            {createCheckboxs( normalizedDifficulties, difficultyStates, handleDifficultyChange )}\n                        </FormGroup>\n                        <FormHelperText></FormHelperText>\n                    </FormControl>\n                    <Divider light />\n                    <FormControl component=\"fieldset\">\n                        <FormLabel component=\"legend\">Select topics</FormLabel>\n                        <FormGroup>\n                            <FormControlLabel\n                                control={<Checkbox checked={allTopicsCheck} onChange={handleAllTopicsCheck} />}\n                                label={\"All\"}\n                            />\n                            {createCheckboxs( normalizedTopics, topicStates, handleTopicChange )}\n                        </FormGroup>\n                        <FormHelperText></FormHelperText>\n                    </FormControl>\n                </Container>\n            </form>\n        </>\n    );\n}\n\nexport default Settings;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport ShareIcon from '@material-ui/icons/Share';\nimport HelpIcon from '@material-ui/icons/Help';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport CachedIcon from '@material-ui/icons/Cached';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport './Card.scss';\nimport DialogHelp from './Dialog_help';\nimport Settings from './Settings';\n\n// Dialog\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport Container from '@material-ui/core/Container'\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        // maxWidth: 345,\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    flex: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n    }\n}));\n\n\nfunction CardComponent(props) {\n    const {\n        question,\n        title,\n        help,\n        onUpdateCard,\n        // updateAfterChangeFilters,\n\n        topics,\n        normalizedTopics,\n        normalizedTopicsMap,\n        topicFilters,\n        setTopicFilters,\n        setCurrentTopic,\n\n        difficulties,\n        normalizedDifficulties,\n        normalizedDifficultiesMap,\n        difficultyFilters,\n        setDifficultyFilters,\n\n        currentQuestions,\n        currentQuestionsMap,\n        currentQuestion,\n        setCurrentQuestion,\n    } = props;\n\n    const classes = useStyles();\n\n    return (\n        <div className=\"card-component\">\n            <Card className={classes.root}>\n                <CardHeader\n                        classes={{title: classes.flex}}\n                        title={\n                            <>\n                                <Settings\n                                    // updateAfterChangeFilters={updateAfterChangeFilters}\n                                    \n                                    topics={topics}\n                                    normalizedTopics={normalizedTopics}\n                                    normalizedTopicsMap={normalizedTopicsMap}\n                                    topicFilters={topicFilters}\n                                    setTopicFilters={setTopicFilters}\n                                    setCurrentTopic={setCurrentTopic}\n                \n                                    difficulties={difficulties}\n                                    normalizedDifficulties={normalizedDifficulties}\n                                    normalizedDifficultiesMap={normalizedDifficultiesMap}\n                                    difficultyFilters={difficultyFilters}\n                                    setDifficultyFilters={setDifficultyFilters}\n\n                                    currentQuestions={currentQuestions}\n                                    currentQuestionsMap={currentQuestionsMap}\n                                    currentQuestion={currentQuestion}\n                                    setCurrentQuestion={setCurrentQuestion}\n                                />\n                                <Typography variant=\"h5\" >\n                                    {title}\n                                </Typography>\n                                <DialogHelp Icon={HelpIcon}>\n                                    <Container maxWidth=\"sm\">\n                                        {help}\n                                    </Container>\n                                </DialogHelp>\n                            </>\n                        }\n                />\n                <CardContent>\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                        {question}\n                    </Typography>\n                </CardContent>\n                \n            </Card>\n           \n        </div>\n    );\n}\n\nexport default CardComponent;","import {randomBetweenNumber} from '../helpers/utils';\n\nconst cardsInformation = [\n    {\n        topic: \"hobbies\",\n        title: {\n            en: 'Hobbies'\n        },\n        questions: {\n            en: [\n                'Do you have hobbies? What are your hobbies? For how long have you had them',\n                'What hobbies are the most expensive? Wich ones are the cheapes',\n                'Wich hobbies are the most popular with women in your country? with men?',\n                'Do you think a hobby is different from sport? in what ways?',\n                'Are there any hobbies you would like to try?',\n                'Which hobbies do you think are the most difficult?',\n                'Are there any hobbies you can do in other countries? but not your own?',\n                'Why people have hobbies? How much time can one spend on his/her hooby?'\n            ],\n            es: [\n                'Do you have hobbies? What are your hobbies? For how long have you had them',\n                'What hobbies are the most expensive? Wich ones are the cheapes',\n                'Wich hobbies are the most popular with women in your country? with men?',\n                'Do you think a hobby is different from sport? in what ways?',\n                'Are there any hobbies you would like to try?',\n                'Which hobbies do you think are the most difficult?',\n                'Are there any hobbies you can do in other countries? but not your own?',\n                'Why people have hobbies? How much time can one spend on his/her hooby?'\n            ],\n\n        },\n        help: \"useful phrase 1\"\n    },\n    {\n        topic: \"emotions\",\n        title: {\n            en: 'Emotions'\n        },\n        questions: {\n            en: [\n                'What are some things that make you feel very good?',\n                'What are some things that can make you feel bad',\n                'What makes you feel nervous?',\n                'In your country, do different colors symbolize differente emotions? Why do you think?',\n                'How do you control your emotions? Is it hard for you?',\n                'Some people think having a nice car o big house will make them happy. What do you think you need to have a happy life?',\n                'Does happines depend on culture? Age? Gender? How?',\n                'What is the saddest movie that you know? Talk about it'\n            ],\n            es: [\n                'What are some things that make you feel very good?',\n                'What are some things that can make you feel bad',\n                'What makes you feel nervous?',\n                'In your country, do different colors symbolize differente emotions? Why do you think?',\n                'How do you control your emotions? Is it hard for you?',\n                'Some people think having a nice car o big house will make them happy. What do you think you need to have a happy life?',\n                'Does happines depend on culture? Age? Gender? How?',\n                'What is the saddest movie that you know? Talk about it'\n            ],\n        },\n        help: \"useful phrase 2\"\n    },\n    {\n        topic: \"family\",\n        title: {\n            en: 'Family'\n        },\n        questions: {\n            en: [\n                'What do you and your family members like to do together?',\n                'How often do you do such activities?',\n                'Do you live in a nuclear or an extended family? What are the advantages and disadvantages of these types of family',\n                'Are friends more important than family or vice versa? Why do you think so?',\n                'Who do you get along better with, your mother or your father? Why is that? How is your relationship with your siblings',\n                'Who does the household work, your father or your mother or both? What chores do you do and how often?',\n                'What are the occupations of your family members? Do they like their jobs? Would yo do the same profession?',\n                'How did you get your name? Who are you named after? Do you like your name?'\n            ],\n            es: [\n                'What do you and your family members like to do together?',\n                'How often do you do such activities?',\n                'Do you live in a nuclear or an extended family? What are the advantages and disadvantages of these types of family',\n                'Are friends more important than family or vice versa? Why do you think so?',\n                'Who do you get along better with, your mother or your father? Why is that? How is your relationship with your siblings',\n                'Who does the household work, your father or your mother or both? What chores do you do and how often?',\n                'What are the occupations of your family members? Do they like their jobs? Would yo do the same profession?',\n                'How did you get your name? Who are you named after? Do you like your name?'\n            ]\n        },\n        help: \"useful phrase 3\"\n    },\n    {\n        topic: \"have_you_ever\",\n        title: {\n            en: \"Have you Ever?\"\n        },\n        questions: {\n            en: [\n                \"Have you ever broken a bone? How did it happen?\",\n                \"Have you ever tried an extreme sport? How did you feel?\",\n                \"How you ever felt lonely?\",\n                \"How you ever wanted to be a superhero? Wich one?\",\n            ],\n            es: [\n                \"Have you ever broken a bone? How did it happen?\",\n                \"Have you ever tried an extreme sport? How did you feel?\",\n                \"How you ever felt lonely?\",\n                \"How you ever wanted to be a superhero? Wich one?\",\n            ]\n        },\n        help: \"useful phrase 4\"\n    },\n];\n\nexport function getCard() {\n    let randomId = randomBetweenNumber(0, cardsInformation.length - 1);\n    return cardsInformation[randomId];\n}\n\nexport function filterQuestions(groupQuestions = [], groupDifficultyQuestions, groups, difficulties) {\n    groups = groups.reduce( (acc, current) => {\n        acc[current] = true;\n        return acc;\n    }, {} );\n    \n    difficulties = difficulties.reduce( (acc, current) => {\n        acc[current] = true;\n        return acc;\n    }, {} );\n\n    let filteredQuestions = groupQuestions.filter((questions, groupId)=> {\n        return groups.hasOwnProperty(groupId);\n    });\n    \n    filteredQuestions = groupQuestions.map((questions, groupId)=> {\n        questions = questions.filter( (question, questionId) => {\n            const questionDifficulty = groupDifficultyQuestions[groupId][questionId];\n            \n            return difficulties.hasOwnProperty(questionDifficulty);\n        });\n\n        return questions;\n    });\n\n    return filteredQuestions;\n}\n\nexport default getCard;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport {useHistory} from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport HomeIcon from '@material-ui/icons/Home';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport Container from '@material-ui/core/Container';\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    }\n}));\n\nfunction Header({languageActives, setLanguageISO, languageISO, languages}) {\n    const classes = useStyles();\n    const history = useHistory();\n\n    const [anchorEl, setAnchorEl] = React.useState();\n\n\n    function handleLanguageClick(event) {\n        setAnchorEl(event.currentTarget);\n    }\n\n    function handleLanguageClose() {\n        setAnchorEl(null);\n    }\n    \n    function handleMenuSelect(event) {\n        const { languageId } = event.currentTarget.dataset;\n        console.log(languageId, event.currentTarget.dataset);\n        setLanguageISO(languageId)\n        setAnchorEl(null);\n    }\n\n    function createMenuItems() {\n        const menuItems = [];\n\n        for (const languageID in languageActives) {\n            menuItems.push(\n                <MenuItem onClick={handleMenuSelect} data-language-id={languageID}>\n                    <span style={{ textTransform: 'uppercase', marginRight: '0.5em' }}>{languageID}</span>\n                    <span>{languages[languageID] && languages[languageID].nativeName}</span>\n                </MenuItem>\n            );\n        }\n\n        return menuItems;\n    }\n\n\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Container maxWidth=\"xs\" className={classes.container}>\n                    <Button color=\"inherit\" aria-label=\"menu\" onClick={() => history.push('/')}>\n                        <HomeIcon />\n                    </Button>\n                    <Button edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={handleLanguageClick}>\n                        <LanguageIcon /><span style={{marginLeft: '0.4em'}}>{languageISO}</span>\n                    </Button>\n                    <Menu\n                      id=\"languageSelector\"\n                      anchorEl={anchorEl}\n                      keepMounted\n                      open={Boolean(anchorEl)}\n                      onClose={handleLanguageClose}\n                      \n                    >\n                        {createMenuItems()}\n                      \n                    </Menu>\n                </Container>\n                \n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default Header;","import React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport './Party.scss'\nimport CardComponent from '../components/Card';\nimport Button from '@material-ui/core/Button';\nimport getCard from '../services/getCards'\nimport Header from '../layout/header';\nimport { randomIdArray, randomElementArray } from '../helpers/utils';\nimport { db, auth } from '../services/firebase';\nimport { useParams } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        display: 'flex',\n        marginTop: '1.2rem',\n        justifyContent: 'space-between'\n    },\n    flexSpace: {\n        flexBasis: 'calc(33.33% - 0.2rem)'\n    }\n}));\n\nfunction Party(props) {\n    const {\n        setLanguageISO,\n        languageISO,\n        languages,\n        languageActives,\n\n        questions,\n\n        topics,\n        normalizedTopics,\n        normalizedTopicsMap,\n        topicFilters,\n        setTopicFilters,\n        \n        difficulties,\n        normalizedDifficulties,\n        normalizedDifficultiesMap,\n        difficultyFilters,\n        setDifficultyFilters,\n\n        currentQuestions,\n        currentQuestionsMap,\n        currentQuestion,\n        setCurrentQuestion,\n\n        dataIsReady\n    } = props;\n\n    const {id} = useParams();\n\n    const classes = useStyles();\n\n    const [partyIsReady, setPartyIsReady] = React.useState();\n\n    const [currentTopic, setCurrentTopic] = React.useState();\n\n    // Buttons states\n    const [isDisabledPrevBtn, setIsDisabledPrevBtn] = React.useState(false);\n    const [isDisabledNextBtn, setIsDisabledNextBt] = React.useState(false);\n    const [isDisabledRandomBtn, setIsDisabledRandomBtn] = React.useState(false);\n    \n\n    // Connecting to party\n    \n    useEffect( function connectParty(){\n        if( id !== undefined && dataIsReady) {\n            console.log(id);\n\n            const refParty = db.ref(`parties/${id}`);\n\n            refParty.on(\"value\",\n                getParty,\n                (errorObject) => {\n                    console.log(\"The read failed: \" + errorObject.code);\n                }\n            )\n\n            function getParty(snapshot) {\n                const party = snapshot.val();\n                console.log(party);\n                setCurrentQuestion(party.currentQuestion);\n                setCurrentTopic(questions[party.currentQuestion].topicId)\n                setDifficultyFilters(party.difficulties);\n                setTopicFilters(party.topics);\n                setPartyIsReady(true);\n\n            }\n\n            return function disconnectParty() {\n                refParty.off(\"value\", getParty);\n            }\n        }\n    }, [dataIsReady, id, partyIsReady, questions, setCurrentQuestion, setDifficultyFilters, setTopicFilters]);\n\n    React.useEffect(function updateAfterChangeFilters() {\n        if( currentQuestion !== undefined && currentQuestions !== undefined && currentQuestionsMap !== undefined && !currentQuestionsMap.hasOwnProperty(currentQuestion)) {\n            if (id !== undefined) {\n                const refcurrentQuestionParty = db.ref(`parties/${id}/currentQuestion`);\n    \n                let newQuestion= randomElementArray(currentQuestions);\n                refcurrentQuestionParty.set(newQuestion.questionId)\n                \n            } else {\n                let newQuestion = randomElementArray(currentQuestions);\n    \n                setCurrentQuestion(newQuestion.questionId);\n                setCurrentTopic(newQuestion.topicId)\n            }\n        }\n    }, [currentQuestions, currentQuestionsMap, currentQuestion]);\n\n    // Handlers\n    function onUpdateCard() {\n        if (id !== undefined && dataIsReady) {\n            setIsDisabledRandomBtn(true);\n            const refcurrentQuestionParty = db.ref(`parties/${id}/currentQuestion`);\n\n            let newQuestion= randomElementArray(currentQuestions);\n            refcurrentQuestionParty.set(newQuestion.questionId, (error) => {\n                if(!error) {\n                    setIsDisabledRandomBtn(false);\n                }\n            })\n            \n        } else if(dataIsReady) {\n            let newQuestion = randomElementArray(currentQuestions);\n\n            setCurrentQuestion(newQuestion.questionId);\n            setCurrentTopic(newQuestion.topicId)\n        }\n        \n    }\n\n    function handleNextClick() {\n        if (id !== undefined && dataIsReady) {\n            setIsDisabledNextBt(true);\n            const refcurrentQuestionParty = db.ref(`parties/${id}/currentQuestion`);\n            let currentQuestionInfo = currentQuestionsMap[currentQuestion]\n            let nextQuestionInfo = currentQuestionInfo.index + 1 < currentQuestions.length ?\n                currentQuestions[currentQuestionInfo.index + 1] :\n                currentQuestions[0];\n\n            refcurrentQuestionParty.set(nextQuestionInfo.questionId, (error) => {\n                if(!error) {\n                    setIsDisabledNextBt(false);\n                }\n            })\n            \n        } else if(dataIsReady) {\n            let currentQuestionInfo = currentQuestionsMap[currentQuestion]\n            let nextQuestionInfo = currentQuestionInfo.index + 1 < currentQuestions.length ?\n                currentQuestions[currentQuestionInfo.index + 1] :\n                currentQuestions[0];\n            setCurrentQuestion(nextQuestionInfo.questionId);\n            setCurrentTopic(nextQuestionInfo.topicId);\n        }\n    }\n\n    function handlePrevClick() {\n        // let prevId = question - 1 > 0 ? question - 1 : questions.length - 1;\n        if (id !== undefined && dataIsReady) {\n            setIsDisabledPrevBtn(true);\n            const refcurrentQuestionParty = db.ref(`parties/${id}/currentQuestion`);\n            let currentQuestionInfo = currentQuestionsMap[currentQuestion]\n            let prevQuestionInfo = currentQuestionInfo.index - 1 > 0 ?\n                currentQuestions[currentQuestionInfo.index - 1] :\n                currentQuestions[currentQuestions.length - 1];\n\n            refcurrentQuestionParty.set(prevQuestionInfo.questionId, (error) => {\n                if(!error) {\n                    setIsDisabledPrevBtn(false);\n                }\n            })\n            \n        } else if(dataIsReady) {\n            let currentQuestionInfo = currentQuestionsMap[currentQuestion]\n            let prevQuestionInfo = currentQuestionInfo.index + 1 < currentQuestions.length ?\n                currentQuestions[currentQuestionInfo.index - 1] :\n                currentQuestions[currentQuestions.length - 1];\n            setCurrentQuestion(prevQuestionInfo.questionId);\n            setCurrentTopic(prevQuestionInfo.topicId);\n        }\n    }\n\n    return (\n        <div className=\"party-page\">\n            <Header \n                languages={languages}\n                languageActives={languageActives}\n                languageISO={languageISO}\n                setLanguageISO={setLanguageISO}>\n            </Header>\n            <Container maxWidth=\"xs\" className=\"container\">\n                <CardComponent \n                    question={dataIsReady && partyIsReady && questions[ currentQuestion ].question}\n                    title={dataIsReady && partyIsReady && topics[ currentTopic ].name}\n                    help={dataIsReady && partyIsReady && topics[ currentTopic ].help}\n                    onUpdateCard={onUpdateCard}\n                    \n\n                    topics={topics}\n                    normalizedTopics={normalizedTopics}\n                    normalizedTopicsMap={normalizedTopicsMap}\n                    setCurrentTopic={setCurrentTopic}\n                    topicFilters={topicFilters}\n                    setTopicFilters={setTopicFilters}\n\n                    difficulties={difficulties}\n                    normalizedDifficulties={normalizedDifficulties}\n                    normalizedDifficultiesMap={normalizedDifficultiesMap}\n                    difficultyFilters={difficultyFilters}\n                    setDifficultyFilters={setDifficultyFilters}\n\n                    currentQuestions={currentQuestions}\n                    currentQuestionsMap={currentQuestionsMap}\n                    currentQuestion={currentQuestion}\n                    setCurrentQuestion={setCurrentQuestion}\n                />\n\n                <div className={`${classes.container} wrapper-btn`}>\n                    <Button disabled={isDisabledPrevBtn}  variant=\"contained\" size=\"large\" color=\"primary\" className={classes.flexSpace} onClick={handlePrevClick}>\n                        Prev\n                    </Button>\n                    <Button disabled={isDisabledRandomBtn} variant=\"contained\" size=\"large\" color=\"primary\" className={classes.flexSpace} onClick={onUpdateCard}>\n                        Random\n                    </Button>\n                    <Button disabled={isDisabledNextBtn} variant=\"contained\" size=\"large\" color=\"primary\" className={classes.flexSpace}  onClick={handleNextClick}>\n                        Next\n                    </Button>\n                </div>\n            </Container>\n        </div>\n    );\n}\n\nexport default Party;","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport {useHistory} from 'react-router-dom';\nimport './Landing.scss';\n\n\nfunction Landing() {\n    const history = useHistory();\n\n    return (\n        <div className=\"landing-page\">\n            <Container maxWidth=\"xs\" className=\"container\">\n                <h1>Party Language <br/> Cards</h1>\n\n                <div className=\"wrapper-button\">\n                    <Button size=\"large\" fullWidth variant=\"contained\" color=\"primary\" onClick={() => history.push('/party/0')}>\n                        New Party\n                    </Button>\n                    <Button size=\"large\" fullWidth variant=\"contained\" color=\"primary\" onClick={() => history.push('/party/0')}>\n                        Random Card\n                    </Button>\n                </div>\n            </Container>\n        </div>\n    );\n}\n\nexport default Landing;","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport {useHistory} from 'react-router-dom';\nimport './Admin.scss';\n\nfunction Admin() {\n    const history = useHistory();\n    return (\n        <div className=\"admin-page\">\n            <Container maxWidth=\"xs\" className=\"container\">\n                <h1>Admin <br/> Cards</h1>\n\n                <div className=\"wrapper-button\">\n                    <Button size=\"large\" fullWidth variant=\"contained\" color=\"primary\" onClick={() => history.push('/edit')}>\n                        Cards\n                    </Button>\n                    <Button size=\"large\" fullWidth variant=\"contained\" color=\"primary\" onClick={() => history.push('/edit')}>\n                        Groups\n                    </Button>\n                    <Button size=\"large\" fullWidth variant=\"contained\" color=\"primary\" onClick={() => history.push('/')}>\n                        Home\n                    </Button>\n                </div>\n            </Container>\n        </div>\n    );\n}\n\nexport default Admin;","import React, {useState} from 'react';\nimport './App.scss';\nimport {HashRouter as Router, Route} from 'react-router-dom';\n\n// Pages\nimport Edit from './pages/Edit';\nimport Party from './pages/Party';\nimport Landing from './pages/Landing';\nimport Admin from './pages/Admin';\n\n// Firebase\nimport { db } from './services/firebase';\n\nfunction App() {\n  \n  return (\n    <Router>\n      <AppRoutes/>\n    </Router>\n  );\n}\n\nfunction AppRoutes() {\n  const [languageISO, setLanguageISO] = useState('en');\n  const [languageActives, setLanguageActives] = useState();\n  const [languages, setLanguages] = useState({});\n\n  const [questions, setQuestions] = useState([]);\n\n  const [topics, setTopics] = React.useState();\n  const [normalizedTopics, setNormalizedTopics] = React.useState();\n  const [normalizedTopicsMap, setNormalizedTopicsMap] = React.useState();\n\n  const [difficulties, setDifficulties] = React.useState();\n  const [normalizedDifficulties, setNormalizedDifficulties] = React.useState();\n  const [normalizedDifficultiesMap, setNormalizedDifficultiesMap] = React.useState();\n\n  // Current information of cards\n  const [currentQuestions, setCurrentQuestions] = useState();\n  const [currentQuestionsMap, setCurrentQuestionsMap] = useState();\n  const [currentQuestion, setCurrentQuestion] = React.useState();\n  const [difficultyFilters, setDifficultyFilters] = React.useState();\n  const [topicFilters, setTopicFilters] = React.useState();\n\n  const [dataIsReady, setDataIsReady] = useState(false);\n\n  React.useEffect(function connectLanguages() {\n    const refLanguages = db.ref(\"languages\");\n\n    refLanguages.on(\"value\",\n    getLanguages,\n    function (errorObject) {\n      console.log(\"The read failed: \" + errorObject.code);\n    });\n\n    function getLanguages(snapshot) {\n      const languages = snapshot.val();\n      setLanguageActives(languages.actives);\n      setLanguages(languages.isoLangs);\n\n      if( questions && languages ) setDataIsReady(true);\n    }\n\n    return function disconnectLanguages() {\n      refLanguages.off(\"value\", getLanguages);\n    }\n\n  }, []);\n\n  React.useEffect( function connectData() {\n    const refData = db.ref(`app/${languageISO}`);\n\n    refData.on(\"value\",\n      getData,\n      (errorObject) => {\n        console.log(\"The read failed: \" + errorObject.code);\n      }\n    )\n  \n    function getData(snapshot) {\n      const data = snapshot.val();\n      console.log(data);\n      setQuestions(data.questions);\n      setCurrentQuestions(data.questions);\n\n      setTopics(data.topics);\n      setTopicFilters(initialFilter(data.topics));\n\n      if( questions && languages ) setDataIsReady(true);\n      \n      setDifficulties(data.difficulties);\n      setDifficultyFilters(initialFilter(data.difficulties));\n    }\n\n    return function disconnectData() {\n      refData.off(\"value\", getData);\n    }\n  }, [languageISO]);\n\n  React.useEffect(function normalizeQuestions() {\n    if( dataIsReady && topicFilters && difficultyFilters) {\n      let normalizedQuestions = [];\n      let normalizedQuestionsMap = {};\n      console.log(topicFilters);\n\n      for (const questionId in questions) {\n        const question = questions[questionId];\n        if( topicFilters[question.topicId] && difficultyFilters[question.difficulty]) {\n          normalizedQuestions.push({\n            ...question,\n            questionId: questionId\n          })\n        }\n      }\n\n      normalizedQuestions.sort(function (a, b) {\n        if (topics[a.topicId].name > topics[b.topicId].name) {\n          return 1;\n        }\n        if (topics[a.topicId].name < topics[b.topicId].name) {\n          return -1;\n        }\n        // a must be equal to b\n        return 0;\n      });\n\n      normalizedQuestions.forEach( (value, index) => {\n        value.index = index;\n        normalizedQuestionsMap[value.questionId] = {\n          ...value,\n          index\n        };\n      });\n\n      console.log(normalizedQuestions);\n      console.log(normalizedQuestionsMap);\n\n      setCurrentQuestions( normalizedQuestions );\n      setCurrentQuestionsMap( normalizedQuestionsMap );\n    }\n\n  }, [dataIsReady, difficultyFilters, questions, topicFilters, topics]);\n\n  React.useEffect(function normalizeTopics() {\n    if( dataIsReady ) {\n      let normalizedTopics = [];\n      let normalizedTopicsMap = {};\n\n      for (const topicId in topics) {\n        const topic = topics[topicId];\n        normalizedTopics.push({\n          ...topic,\n          id: topicId,\n        });\n      }\n\n      normalizedTopics.sort(function (a, b) {\n        if (a.name > b.name) {\n          return 1;\n        }\n        if (a.name < b.name) {\n          return -1;\n        }\n        // a must be equal to b\n        return 0;\n      });\n\n      normalizedTopics.forEach( (value, index) => {\n        value.index = index;\n        normalizedTopicsMap[value.id] = {\n          ...value,\n          idNormalized: index,\n        };\n      });\n\n      setNormalizedTopics( normalizedTopics );\n      setNormalizedTopicsMap( normalizedTopicsMap );\n    }\n\n  }, [topics]);\n\n  React.useEffect(function normalizeDifficulties() {\n    if( dataIsReady ) {\n      let normalizedDifficulties = [];\n      let normalizedDifficultiesMap = {};\n\n      for (const difficultyId in difficulties) {\n        const topic = difficulties[difficultyId];\n        normalizedDifficulties.push({\n          ...topic,\n          id: difficultyId,\n        });\n      }\n\n      normalizedDifficulties.sort(function (a, b) {\n        if (a.id > b.id) {\n          return 1;\n        }\n        if (a.id < b.id) {\n          return -1;\n        }\n        // a must be equal to b\n        return 0;\n      });\n\n      normalizedDifficulties.forEach( (value, index) => {\n        value.index = index;\n        normalizedDifficultiesMap[value.difficultyId] = {\n          ...value,\n          idNormalized: index,\n        };\n      });\n\n      setNormalizedDifficulties( normalizedDifficulties );\n      setNormalizedDifficultiesMap( normalizedDifficultiesMap );\n    }\n\n  }, [difficulties]);\n  \n\n  function initialFilter(elements) {\n    const result = {};\n\n    for (const id in elements) {\n      if (elements.hasOwnProperty(id)) {\n        result[id] = true;\n      }\n    }\n\n    return result;\n  }\n\n  return <>\n    <Route exact path=\"/\">\n      <Landing\n        languageISO={languageISO}\n        setLanguageISO={setLanguageISO}\n        languageActives={languageActives}\n      />\n    </Route>\n    <Route exact path=\"/edit\"><Edit/></Route>\n    <Route exact path=\"/admin\"><Admin/></Route>\n    <Route exact path=\"/party/:id\">\n      <Party \n        setLanguageISO={setLanguageISO}\n        languageISO={languageISO}\n        languages={languages}\n        languageActives={languageActives}\n\n        questions={questions}\n\n        topics={topics}\n        normalizedTopics={normalizedTopics}\n        normalizedTopicsMap={normalizedTopicsMap}\n        topicFilters={topicFilters}\n        setTopicFilters={setTopicFilters}\n\n        difficulties={difficulties}\n        normalizedDifficulties={normalizedDifficulties}\n        normalizedDifficultiesMap={normalizedDifficultiesMap}\n        difficultyFilters={difficultyFilters}\n        setDifficultyFilters={setDifficultyFilters}\n\n        currentQuestions={currentQuestions}\n        currentQuestionsMap={currentQuestionsMap}\n        currentQuestion={currentQuestion}\n        setCurrentQuestion={setCurrentQuestion}\n\n        dataIsReady={dataIsReady}\n      />\n    </Route>\n  </>;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}